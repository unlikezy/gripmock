// Code generated by GripMock. DO NOT EDIT.
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net"
	"net/http"

	"github.com/golang/protobuf/jsonpb"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	protobufproto "github.com/golang/protobuf/proto"
	"google.golang.org/grpc/status"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/reflection"
	"google.golang.org/protobuf/runtime/protoiface"
)
{{ range $package, $alias := .Dependencies }}
import {{$alias}} "{{$package}}"
{{end}}
const (
	TCP_ADDRESS  = "{{.GrpcAddr}}"
	HTTP_PORT = ":{{.AdminPort}}"
)

{{ range .Services }}
{{ template "services" . }}
{{ end }}

func main() {
	lis, err := net.Listen("tcp", TCP_ADDRESS)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	s := grpc.NewServer()
	{{ range .Services }}
	{{ template "register_services" . }}
	{{ end }}

	reflection.Register(s)
	fmt.Println("Serving gRPC on tcp://" + TCP_ADDRESS)
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}

{{ template "find_stub" }}

{{ define "services" }}
type {{.Name}} struct{}

{{ template "methods" .}}
{{ end }}

{{ define "methods" }}
{{ range .Methods}}
	{{ if eq .MethodType "standard"}}
		{{ template "standard_method" .}}
	{{ else if eq .MethodType "server-stream"}}
		{{ template "server_stream_method" .}}
	{{ else if eq .MethodType "client-stream"}}
		{{ template "client_stream_method" .}}
	{{ else if eq .MethodType "bidirectional"}}
		{{ template "bidirectional_method" .}}
	{{ end }}
{{end}}
{{end}}

{{ define "standard_method" }}
func (s *{{.ServiceName}}) {{.Name}}(ctx context.Context, in *{{.Input}}) (*{{.Output}},error){
	out := &{{.Output}}{}
	outs := &[]interface{}{}
	headers, _ := metadata.FromIncomingContext(ctx)
	err := findStub(ctx, "{{.ServiceName}}", "{{.Name}}", headers, in, out, outs)
	if err != nil {
		return nil, err
	}

	return out, err
}
{{ end }}

{{ define "server_stream_method" }}
func (s *{{.ServiceName}}) {{.Name}}(in *{{.Input}}, srv {{.SvcPackage}}{{.ServiceName}}_{{.Name}}Server) error {
	out := &{{.Output}}{}
	outs := &[]interface{}{}
	headers, _ := metadata.FromIncomingContext(srv.Context())
	err := findStub(srv.Context(), "{{.ServiceName}}", "{{.Name}}", headers, in, out, outs)
	if err != nil {
		return err
	}
	if outs != nil {
		for _, o := range *outs {
			o, ok := o.(*{{.Output}})
			if !ok {
				return fmt.Errorf("expected type %T, got %T", &{{.Output}}{}, o)
			}
			if err := srv.Send(o); err != nil {
				return err
			}
		}
	} else if err := srv.Send(out); err != nil{
		return err
	}
	return nil
}
{{ end }}

{{ define "client_stream_method"}}
func (s *{{.ServiceName}}) {{.Name}}(srv {{.SvcPackage}}{{.ServiceName}}_{{.Name}}Server) error {
	out := &{{.Output}}{}
	outs := &[]interface{}{}
	for {
		input,err := srv.Recv()
		if err == io.EOF {
			return srv.SendAndClose(out)
		}
		headers, _ := metadata.FromIncomingContext(srv.Context())
		err = findStub(srv.Context(), "{{.ServiceName}}","{{.Name}}", headers, input, out, outs)
		if err != nil {
			return err
		}
	}
}
{{ end }}

{{ define "bidirectional_method"}}
func (s *{{.ServiceName}}) {{.Name}}(srv {{.SvcPackage}}{{.ServiceName}}_{{.Name}}Server) error {
	for {
		in, err := srv.Recv()
		if err == io.EOF {
			return nil
		}
		if err != nil {
			return err
		}

		headers, _ := metadata.FromIncomingContext(srv.Context())
		out := &{{.Output}}{}
		outs := &[]interface{}{}
		err = findStub(srv.Context(), "{{.ServiceName}}","{{.Name}}", headers, in, out, outs)
		if err != nil {
			return err
		}
		if outs != nil {
			for _, o := range *outs {
				o, ok := o.(*{{.Output}})
				if !ok {
					return fmt.Errorf("expected type %T, got %T", &{{.Output}}{}, o)
				}
				if err := srv.Send(o); err != nil {
					return err
				}
			}
		} else if err := srv.Send(out); err != nil{
			return err
		}
	}
}
{{end}}


{{ define "register_services" }}
	{{.Package}}Register{{.Name}}Server(s, &{{.Name}}{})
{{ end }}

{{ define "find_stub" }}
type payload struct {
	Service string            `json:"service"`
	Method  string            `json:"method"`
	Data    interface{}       `json:"data"`
	Headers map[string]string `json:"headers"`
}

type response struct {
	Data  interface{} `json:"data"`
	Datas  []interface{} `json:"datas"`
	Error string      `json:"error"`
	Code  *codes.Code `json:"code,omitempty"`
	Headers map[string]string `json:"headers,omitempty"`
}

func findStub(ctx context.Context, service, method string, headers metadata.MD, in, out protobufproto.Message, outs *[]interface{}) error {
	url := fmt.Sprintf("http://localhost%s/find", HTTP_PORT)
	var headersMap map[string]string
	if headers != nil {
		headersMap = make(map[string]string)
		for header, values := range headers {
			headersMap[header] = values[0]
		}
	}

	pyl := payload{
		Service: service,
		Method:  method,
		Data:    in,
		Headers: headersMap,
	}
	byt, err := json.Marshal(pyl)
	if err != nil {
		return err
	}
	reader := bytes.NewReader(byt)
	resp, err := http.DefaultClient.Post(url, "application/json", reader)
	if err != nil {
		return fmt.Errorf("Error request to stub server %v",err)
	}

	if resp.StatusCode != http.StatusOK {
		body, _ := ioutil.ReadAll(resp.Body)
		return fmt.Errorf(string(body))
	}

	respRPC := new(response)
	err = json.NewDecoder(resp.Body).Decode(respRPC)
	if err != nil {
		return fmt.Errorf("decoding json response %v",err)
	}

	if respRPC.Error != "" || respRPC.Code != nil {
	    if respRPC.Code == nil {
	       abortedCode := codes.Aborted
	       respRPC.Code = &abortedCode
	    }
	    if *respRPC.Code != codes.OK {
		    return status.Error(*respRPC.Code, respRPC.Error)
		}
	}

    if respRPC.Headers != nil {
        md := metadata.New(respRPC.Headers)
        grpc.SetHeader(ctx, md)
    }

	data, _ := json.Marshal(respRPC.Data)
	err1 := jsonpb.Unmarshal(bytes.NewReader(data), out)

	fmt.Println("Datas:", respRPC.Datas)
	for _, d := range respRPC.Datas {
		fmt.Println("d:", d)
		var err2 error
		md, _ := json.Marshal(d)
		fmt.Println("Marshal data:", md)
		o := protobufproto.Clone(out)
		err2 = jsonpb.Unmarshal(bytes.NewReader(md), o)
		if err2 != nil {
			return fmt.Errorf("unmarshalling response data %v",err2)
		}
		fmt.Println("o:", o)
		*outs = append(*outs, o)
	}
	if err1 != nil {
		return fmt.Errorf("unmarshalling response %v",err1)
	}
	return nil
}
{{ end }}
